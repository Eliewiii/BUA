import os
import shutil
import platform



def ensure_directory_exists(directory,overwrite=False):
    """Ensure that the specified directory exists. Create it if it does not."""
    if os.path.exists(directory) and overwrite:
        shutil.rmtree(directory)
        print(f"overwriting directory: {directory}")
    if not os.path.exists(directory):
        os.makedirs(directory)
        print(f"Created directory: {directory}")


def get_root_and_user_folders(package_name:str, overwrite_root:bool=False,overwrite_user:bool=False)->(str,str):
    """Return the root and user folders for the package's additional data based on the operating system."""
    os_name = platform.system().lower()

    if os_name == "windows":
        root_folder = os.path.join(os.getenv('LOCALAPPDATA'), package_name)  # For machine-specific data
        user_folder = os.path.join(os.getenv('APPDATA'), package_name)  # For user-specific data
    elif os_name == "linux":
        root_folder = os.path.join(os.getenv('XDG_DATA_HOME', os.path.expanduser("~/.local/share")),
                                   package_name)
        user_folder = os.path.join(os.getenv('XDG_CONFIG_HOME', os.path.expanduser("~/.config")), package_name)
    elif os_name == "darwin":
        root_folder = os.path.join(os.path.expanduser("~"), 'Library', 'Application Support', package_name)
        user_folder = os.path.join(os.path.expanduser("~"), 'Library', 'Preferences', package_name)
    else:
        raise OSError("Unsupported operating system")

    # Ensure the directories exist
    ensure_directory_exists(directory=root_folder, overwrite=overwrite_root)
    ensure_directory_exists(directory=user_folder, overwrite=overwrite_root)

    return root_folder, user_folder


# Name of the toll folder
tool_name = "BUA"

# Define paths using the root folder
root_folder, user_folder = get_root_and_user_folders(package_name=tool_name)

# -------------------------------
# Machine specific folders
# -------------------------------
# Name  and path to the tool folder
path_tool = os.path.join(root_folder, tool_name)
# Path of the different folders in the tool
path_scripts_tool_folder = os.path.join(path_tool, "Scripts")
path_libraries_tool_folder = os.path.join(path_tool, "Libraries")
path_simulation_temp_folder = os.path.join(path_tool, "Simulation_temp")

# Name of the folders generated by the tool
name_gh_components_logs_folder = "gh_components_logs"
name_temporary_files_folder = "temporary_files"
name_ubes_temp_simulation_folder = "BES_temp_simulation"
name_radiation_simulation_folder = 'Irradiance_and_BIPV_simulation'
name_ubes_simulation_result_folder = "UBES_simulation"

# Urban Canopy name and exports
name_urban_canopy_export_file = "urban_canopy"
name_urban_canopy_export_file_pkl = name_urban_canopy_export_file + ".pkl"
name_urban_canopy_export_file_json = name_urban_canopy_export_file + ".json"

# name of the files generated by the tool

# BIPV simulation
path_folder_bipv_library = os.path.join(path_libraries_tool_folder, "BIPV")
path_folder_default_bipv_parameters = os.path.join(path_folder_bipv_library, "default")
path_folder_user_bipv_parameters = os.path.join(path_folder_bipv_library, "user")
# UBES
name_ubes_epw_file = "uc_epw_ubes.epw"
name_ubes_hbjson_simulation_parameters_file = "uc_ubes_hb_simulation_parameters.json"

# -------------------------------
# User specific folders
# -------------------------------
path_user_data = os.path.join(user_folder,tool_name)

# Example usage within the module (for debugging or setup)
if __name__ == "__main__":
    print("Configuration settings:")
    print(f"Root folder: {root_folder}")
    print(f"User folder: {user_folder}")
