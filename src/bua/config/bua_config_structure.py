"""
File containing all the configuration settings for the BUA package, for the folder structure and the data paths.
It also take care of the setup of the package during installation, installing the data libraries.
"""
import os
import sys
import shutil
import argparse
import platform
import urllib.request
from zipfile import ZipFile


def ensure_directory_exists(directory, overwrite=False):
    """Ensure that the specified directory exists. Create it if it does not."""
    if os.path.exists(directory) and overwrite:
        shutil.rmtree(directory)
        print(f"overwriting directory: {directory}")
    if not os.path.exists(directory):
        os.makedirs(directory)
        print(f"Created directory: {directory}")


def download_file(url, destination):
    print(f"Downloading from {url} to {destination}...")
    url = url.replace("\\", "/")
    try:
        urllib.request.urlretrieve(url, destination)
        print(f"Downloaded to {destination}")
    except Exception as e:
        print(f"Failed to download file. Error: {e}")


def unzip_file(zip_path, extract_to):
    # Create the folder if it does not exist
    ensure_directory_exists(extract_to)
    # Extract the contents of the zip file
    print(f"Unzipping {zip_path} to {extract_to}...")
    with ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    # Remove the zip file
    os.remove(zip_path)
    print(f"Extraction complete. Contents extracted to {extract_to}")


def get_root_and_user_folders(package_name: str, overwrite_root: bool = False,
                              overwrite_user: bool = False) -> (str, str):
    """Return the root and user folders for the package's additional data based on the operating system."""
    os_name = platform.system().lower()

    if os_name == "windows":
        root_folder = os.path.join(os.getenv('LOCALAPPDATA'), package_name)  # For machine-specific data
        user_folder = os.path.join(os.getenv('APPDATA'), package_name)  # For user-specific data
    elif os_name == "linux":
        root_folder = os.path.join(os.getenv('XDG_DATA_HOME', os.path.expanduser("~/.local/share")),
                                   package_name)
        user_folder = os.path.join(os.getenv('XDG_CONFIG_HOME', os.path.expanduser("~/.config")),
                                   package_name)
    elif os_name == "darwin":
        root_folder = os.path.join(os.path.expanduser("~"), 'Library', 'Application Support', package_name)
        user_folder = os.path.join(os.path.expanduser("~"), 'Library', 'Preferences', package_name)
    else:
        raise OSError("Unsupported operating system")

    # Ensure the directories exist
    ensure_directory_exists(directory=root_folder, overwrite=overwrite_root)
    ensure_directory_exists(directory=user_folder, overwrite=overwrite_root)

    return root_folder, user_folder


# Name of the toll folder
tool_name = "BUA"

# -------------------------------
# Downloads
# -------------------------------
url_github_repo = r"https://github.com/Eliewiii/BUA"
url_downloads = os.path.join(url_github_repo, "releases", "download")
library_zip_file_name = "bua_library.zip"

r"https://github.com/Eliewiii/Building_Urban_Analysis/releases/download/V1.2.1/Libraries_tool.zip"

# Define path of the root and user folders
root_folder, user_folder = get_root_and_user_folders(package_name=tool_name)

# -------------------------------
# Machine specific folders
# -------------------------------
# Path of the different folders in the tool
path_scripts_tool_folder = os.path.join(root_folder, "Scripts")
path_libraries_tool_folder = os.path.join(root_folder, "Libraries")
path_simulation_temp_folder = os.path.join(root_folder, "Simulation_temp")

# Name of the folders generated by the tool
name_gh_components_logs_folder = "gh_components_logs"
name_temporary_files_folder = "temporary_files"
name_ubes_temp_simulation_folder = "BES_temp_simulation"
name_radiation_simulation_folder = 'Irradiance_and_BIPV_simulation'
name_ubes_simulation_result_folder = "UBES_simulation"

# Urban Canopy name and exports
name_urban_canopy_export_file = "urban_canopy"
name_urban_canopy_export_file_pkl = name_urban_canopy_export_file + ".pkl"
name_urban_canopy_export_file_json = name_urban_canopy_export_file + ".json"

# name of the files generated by the tool

# BIPV simulation
name_bipv_library_folder = "BIPV"
path_folder_bipv_library = os.path.join(path_libraries_tool_folder, name_bipv_library_folder)
path_folder_default_bipv_parameters = os.path.join(path_folder_bipv_library, "default")
path_folder_user_bipv_parameters = os.path.join(path_folder_bipv_library, "user")
# UBES
name_ubes_epw_file = "uc_epw_ubes.epw"
name_ubes_hbjson_simulation_parameters_file = "uc_ubes_hb_simulation_parameters.json"
# Typology
name_typology_folder = "typology"

# -------------------------------
# User specific folders
# -------------------------------
# name user library folder
name_user_library_folder = "user_library"


### Functions to for the package setup
def setup_package(version_tag):
    """
    Setup the system and user folders of the package, especially the libraries and the temporary simulation folders.
    :return:
    """
    # Create bua machine folder in Appdata local
    ensure_directory_exists(directory=root_folder, overwrite=False)
    # Simulation temp folder
    ensure_directory_exists(directory=path_simulation_temp_folder, overwrite=True)

    # download the libraries
    ensure_directory_exists(directory=path_libraries_tool_folder, overwrite=True)
    url_libraries = os.path.join(url_downloads, version_tag, library_zip_file_name)
    path_libraries_zip = os.path.join(path_libraries_tool_folder, library_zip_file_name)
    download_file(url=url_libraries, destination=path_libraries_zip)
    unzip_file(zip_path=path_libraries_zip, extract_to=path_libraries_tool_folder)
    # Create bua user folder in Appdata roaming
    ensure_directory_exists(directory=user_folder, overwrite=False)
    # Create the user library folder
    # todo: When properly implemented, check deprecated structure of the user library folder
    ensure_directory_exists(directory=os.path.join(user_folder, name_user_library_folder), overwrite=False)
    # Create the user library sub_folder
    ensure_directory_exists(
        directory=os.path.join(user_folder, name_user_library_folder, name_bipv_library_folder),
        overwrite=False)


"https://github.com/Eliewiii/BUA/releases/download/v1.0.0/bua_library.zip"

# Example usage within the module (for debugging or setup)
if __name__ == "__main__":
    print("Configuration settings:")
    print(f"Root folder: {root_folder}")
    print(f"User folder: {user_folder}")
    parser = argparse.ArgumentParser(description="Setup and configuration script.")
    parser.add_argument('--version', required=True, help="Version tag for the data to download.")
    parser.add_argument('--setup', required=True, help="tell if to setup.")
    args = parser.parse_args()
    version = args.version
    is_setup = args.setup
    if is_setup:
        setup_package(version_tag=version)

        print("Configuration settings:")
        print(f"Root folder: {root_folder}")
        print(f"User folder: {user_folder}")
